#!/usr/bin/env python

import subprocess
import urllib2
import json
import sys
import datetime
import argparse
from pprint import pprint

LOG_FILE = '/Users/tom/.ips.log'

parser = argparse.ArgumentParser()
parser.add_argument('-a', '--all',
                    help="show all interfaces, including disconnected",
                    action='store_true')
parser.add_argument('-e', '--external',
                    help="just show the external IP",
                    action='store_true')
args = parser.parse_args()


class Interfaces(object):

    def __init__(self):
        self._interfaces = []
        self._external_ip = ''

    @property
    def interfaces(self):
        if self._interfaces == []:
            self._interfaces = self.get_interfaces()

        return self._interfaces

    @property
    def external_ip(self):
        if self._external_ip == '':
            self._external_ip = self.get_external_ip()

        return self._external_ip

    def colour_string(self, s, colour):
        colours = {
            'red': '\033[1;31m',
            'green': '\033[1;32m',
            'yellow': '\033[1;33m',
            'blue': '\033[1;34m',
            'magenta': '\033[1;35m',
            'cyan': '\033[1;36m',
            'white': '\033[37m'}
        reset = "\033[0m"

        if colour in colours:
            return "{}{}{}".format(colours[colour], s, reset)

        return s

    def get_interfaces(self):
        interfaces = []
        data = subprocess.check_output(
            "networksetup -listallhardwareports",
            shell=True
        ).split('\n\n')

        for result in data:
            details = result.split('\n')
            if details[0] == '':
                details.pop(0)
            try:
                name = details[0].split(': ')[1]
                interface = details[1].split(': ')[1]
                mac = details[2].split(': ')[1]
                interfaces.append({
                    'interface': interface,
                    'name': name,
                    'mac': mac,
                })
            except:
                pass

        # Get ip addresses
        for interface in interfaces:
            try:
                ip = subprocess.check_output(
                    "ipconfig getifaddr {}".format(interface['interface']),
                    shell=True
                )
                interface['ip'] = ip.strip()
            except:
                pass

        # Find wifi interfaces
        for interface in interfaces:
            try:
                networks = subprocess.check_output(
                    "networksetup -listpreferredwirelessnetworks {}".format(
                        interface['interface']
                    ),
                    shell=True
                )
                fail = "{} en2 is not a Wi-Fi interface.".format(
                    interface['interface']
                )
                interface['wireless'] = fail not in networks
            except:
                interface['wireless'] = False

        # Find ssid for wireless interfaces
        for interface in interfaces:
            if interface['wireless']:
                ssid = subprocess.check_output(
                    "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | grep '[^B]SSID' | cut -c 18-",
                    shell=True
                )
                interface['ssid'] = ssid.strip()

        return interfaces

    def get_external_ip(self):
        url = "http://ip-api.com/json"
        try:
            data = json.loads(urllib2.urlopen(url).read())
            return data['query']
        except:
            return None

    def print_data(self):
        if args.external:
            print self.external_ip
            return True

        for interface in self.interfaces:
            if 'ip' in interface.keys():
                if not interface['wireless']:
                    print "{:>8}: {}".format(
                        interface['name'],
                        interface['ip'],
                    )
                else:
                    print "{:>8}: {} {}".format(
                        interface['name'],
                        interface['ip'],
                        self.colour_string(interface['ssid'], 'yellow')
                    )
            elif args.all:
                print "{:>8}: {}".format(
                    interface['name'],
                    self.colour_string("Not Connected", 'red')
                )
        print "External: {}".format(
            self.external_ip if self.external_ip is not None
            else self.colour_string("Unknown", 'cyan')
        )

    def log_data(self, log_file):
        with open(log_file, 'a+') as log:
            log.write(
                json.dumps({
                    'datetime': datetime.datetime.now().isoformat(),
                    'interfaces': self.interfaces,
                    'external_ip': self.external_ip
                }))
            log.write('\n')


interfaces = Interfaces()
interfaces.print_data()
interfaces.log_data(LOG_FILE)
